<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于网格的运动统计，用于快速、超鲁棒性的匹配]]></title>
    <url>%2F2018%2F05%2F16%2FGMS-Grid-base%20Motion%20Statistics%20for%20Fast%EF%BC%8CUltra-robust%20Feature%20Correspondence%2F</url>
    <content type="text"><![CDATA[前序今天分为两个部分讲解： 关于Feature Matching 的介绍，可能有些人对feature matching本身不太了解。 最近几年关于关于feature matching的文章，主要有三篇。 前两篇文章主要的工作是：把feature matching做的特别的robust，之前的一些作法可能能基本的实现基本的match，但是因为match的质量不高，导致很多应用是不能用的，比如三维重构。但是经过前两篇文章，就可以实现之前不能实现的了，提升了鲁棒性，具有了很大的提高。该篇文章主要是对前两篇文章的优化，因为前两篇虽然最终效果很好，但是速度很慢。对于三维重构来说速度勉强可以，但是对于机器人导航、SLAM、无人机这些应用来说，速度就不够了，作者就对这个问题进行了时间的优化，最终达到的效果就是：性能和前两篇文章实现的相近，时间提升了很多，很快。希望能把这个算法应用到更多实时应用上。 Feature Matching Introduction 我们可以看一下这两张图，图中山峰是同一个山峰，但是是由人由两个角度进行拍照。所以我们如果能把两张图片中对应的点找来，找出来有什么用呢？我们知道上面的两幅图是由人从不同的角度拍照得来的，那么这两幅图中间是有一个几何关系，这个几何关系可以由一个方程来表示。那么每一个匹配点就相当于这个方程的解，如果我们有足够多的正确匹配的点，我们就可以用这些点来估算这个方程里面的参数，相当于我们知道了两张图片中对应的几何关系 Correct Correspondences的应用你把两张图片中相同的点匹配起来有什么用？ Geometry between 2 views，Geometry就是两张图片中的几何关系，这样我们便可以用来做很多事情：比如：Estimate Camera Pose Localization(SFM)、Tracking(SLAM):就是你能把一帧一帧图像之间的相对应的几何关系能算出来，如果很准的话，你就能画出来人运动的轨迹，就是一个人导航问题。 Similarity（Number of matches），根据Feature matching的多少评测两张图片的相似度。然后我们就可以用来做Image Retrieval(图像检索)、Object Recognition(目标识别)、Loop Closing(SLAM)…. 如何实现Feature Matching就是在两张Image中相同的这些部分找到，再把它们匹配起来。 首先是如何找到，包含两个步骤：Detection、Description。 Detection：首先找到的是角点，再者比较容易找的是边缘的点。 Description：对于这些每一个点计算出周围的特征，比如sift是用128维的数字去描述他的一个description。 matching的时候，只要用这个128维的数字计算跟哪个点的距离最小，就是最相似的 Geometry：你拿到这些点的匹配后，去做一个他们之间的相关的几何匹配，模拟几何关系，符合这个几何关系的就是正确匹配的点，不符合的就是错误的点。有了几何关系就可以坐后面的事情了。 LIFT：是用深度学习做的，他认为用深度学习得到的feature比手动提取的feature 更加有用 Matching Algorithms：CODE、RepMatch、GMS。因为Brute-Force和Approximate（FLANN）所获取的匹配点是杂乱的，大量的，这样你最后算几何关系就会很慢，效果还不好。我们这些Matching Algorithms算法是用来从Nearest-Nerighbor match中找出正确的匹配点，错的剔除去。 如何估计两张图片之间的几何关系一般用的是RANSAC-based方法。 RANSAC：Random Sample Consensus，它是根据一组包含异常数据的样本数据集，计算出数据的数据模型参数，得到有效样本数据的算法。 RANSAC也做了一下假设：给定一组（通常很小的）局内点（符合最优模型的点为局内点，不符合的定义为据外点），存在一个可以估计模型参数的过程而该模型能够解释或者适用于局内点 一个简单的例子就是从一组观测数据中找到合适的2维直线。假设检测到的数据如上图左图。简单的最小二乘法不能找出适应与局内点的直线，原因是最小二乘法尽量去适应包括局外点在内的所有的点。相反，RANSAC能够得出一个仅仅用局内点计算出模型，并且概率还足够高。但是RANSAC并不能保证结果一定正确，为了保证算法有足够搞得合理概率，我们必须小心的选择算法的参数。 在我们的Feature matching里面，它的RANSAC就不是一条直线了，而是两张图片中的几何关系。这里有两个普遍的几何关系： Fundamental Matrix（for 3D scenes）：Point to Line(weak, general)只能是点对线的匹配，就是给定第一张图片中的一个点，它会在第二张图片中画出这个点所在的线。能把一个点和一条线对应起来，这就是它们之间的几何关系，这个几何关系能够恢复出来相机的旋转和平移，用的方法主要是RANSAC方法 Homography (for 2D scenes)：Point to Point（strong，narrow range）只对2D场景有效，比如你拍一张墙的照片，然后对其中一个点，就能匹配到第二张图片的点。 Recent Robust MatchersCODE [1] 该算法解决的是 wide-baseline matching问题。 wide-baseline matching ？基线的本意是指立体视觉系统中量摄像机光心之间的距离。一句拍摄两幅图，像的视点位置可将对应点匹配问题分为宽基线和窄基线。宽基线一词用于匹配时，泛指两幅图像有明显不同的情况下匹配。产生这种情况的原因有可能为摄像机之间的位置相差很大，也有可能由于摄像机旋转或焦距的变化等因素产生。 每一幅图片中的其实是两幅图片，图片中的墙是相同的一个墙，只是由于拍摄的角度特别的大，传统的一些算法处理的不是很好，但是code算法可以，匹配的比较多，准确率也比较高 Idea 整体思想如上图，包含了三个回归模型，likelihood是第一个模型，affine motion 为第二第三个模型。这些回归模型就相当于分类器。 首先输入的是 Selected matches ，就是先挑一些比较好的match，把它们记录下来，去fit第一个模型，其实就相当于是一个分类器，然后用这个分类器把所有match做一个过滤，符合这个的留下来，不符合的剔除。 然后再用后面两个模型（即分类器）去过滤，最后都通过的才算最终正确的匹配点。 这三个回归是怎么做的？看下图（回归模型） 有一堆散的点，用这些数据去fit一个平面，这个平面上的你认为是对的，不在这个平面上，你认为是错误的。这样的regression总共有三步。 作者认为 (a) (b) 这样的图像中的点是正确的点，而像 (c) 这两个比较近的点的方向还差这么大，就认为是错的。第一个模型likelihood就是找到连续的motion，那些点的motion是连续的。第二个模型就是提升了它的精度，把x和y都测了一下。 结果 应用 主要是三维重构，你上面第二幅图是用商业软件做的，并不是很好，第三幅是用SFM做的，第四幅还是用SFM做的，但是它把SFM中的Feature matching替换成CODE算法得出的feature matching，效果就好很多。 Run time comparison 纵轴是时间表示，以 s 为单位，横轴是matches的数量，可以看到code运行的时间要比其他的好很多，但是对于slam ，机器人导航，一秒钟要读取几十帧，code这个算法的时间还是不够的。 RepMatch [2] 基于第一个算法之上，解决一个重复结构（repeated structure）的问题。它是用第一个算法的输出，然后在这个输出上再做一次优化，筛选一些对的点。 repeated structure到底是一个什么问题 比如 (a) 图中，我们拍了一栋楼的正面，侧面，反面等照片，然后进行SFM三维重构，发现结果它是给我化成了四个部分，但其实它是一栋楼，就是说三维重构并没有重构出这栋楼。原因：因为（a）图像中的楼的各个面的窗口都很像，你也不能确定正面的窗口和背面的窗口有什么不一样，所以导致一个问题：比如SFM就给你标出四个独立的模型，这明明是一栋楼，它合不起来。主要是因为他们之间错误的匹配太多了，你把楼的前面跟后面匹配在一起，它脑子就乱了，根本不知道这是个什么模型。 然后用了RepMatch，就能构造一个完整的模型，周围的每一个点是每一张相片拍照的位置，中间这一圈就是楼的俯视图，你他最后dense reconstruction的结果就是最右边的图 Repetitive Structure（怎么做到的构建成功的）它是建立在CODE 输出结果之上的。它把输出结果分为了几类： 第一类： GMS这篇文章主要是把前面两篇文章的主要思想掌握到，然后把它变快，能够把它应用到更多上面。 Motivation：为什么又要质量好又要速度快 论文GMS的方法实际上是消除错误匹配的一种方案，比如可以替换ransac。算法执行的大致流程是：先执行任意一种特征点的检测和特征点的描述子计算，论文中采用的是ORB特征。然后执行暴力匹配BF，最后执行GMS以消除错误匹配。 Key IdeaTrue matches(green) are visually smooth while false matches(cyan) are not. 正确匹配的点我们用绿色的标注出来，错误匹配的点用青涩标注出来。首先我们可以看到正确匹配的点，举个例子，假设随便拿出来两个正确匹配的点（绿色标注的）记为1号点和2号点，1、2号点在另一幅图中对应匹配的点为1‘和2’。我们可以看到1号点对应的匹配点1‘与2号点对应的匹配点2’位置差不多，相似，整个过程是一个比较smooth的过程。而两个相近错误的点（青色的标注），对应的匹配点一个去了楼上，一个去了天上，这就是我们从观察上得到的信息。那么如何把这个观察的信息变成一个算法去验证这个点是对还是不对，这就是算法的核心。 首先我们说了一个正确的match看起来比较smooth，所以我们有没有办法把这些看起来比较smooth的match提取出来，我们就认为这些match是对的。根据贝叶斯上讲，既然正确的match看起来比较smooth，那么比较smooth的match应该也是正确的。 Key Idea：就是我们如何把match中比较smooth的match拿出来。 方法主要分为三部分： Motion Statistics Grid Framework：是用来加速的 Motion Kernels：也是用来加速的 后面两个部分都是为了实现第一个部分Motion统计，让它变得很快。 Motion StatisticsMotion Statistics Model 对每一个正确的match，左右各画一个圈，我数一下圈中还有多少个match。如果一个正确的match，它旁边还有正确的match的话，应该是支持它的。道理就是一个正确的match旁边可能有对的点在帮你，而对于一个错误的match，你的这个错误是随机发生的，你很难再找到一个点跟你犯一样的错误。所以这两个的概率相差非常大的，第一种正确的match这个圈里面总会有一些点来支持它，而错误的match 支持它的点可能有，但是会很少，这就是这个算法的模型。 Si = 2；Sj = 0. 我们分析一下这个模型为什么对于判断“这个点是否正确”有效我们假设一个点的统计值 Si ， 它应该服从这个binomial distribution（二项分布）。就假设这个 xi 是正确的的话，那么用 pt 表示这个概率，这个概率是指：假设上图中左边的圈为A，右边的圈为B，那么如果这个点 xi 是正确的话，它周围的点从A到B的可能性是多少，就是支持这个点 xi 的可能性是多少。对于这个 pf ，如果这个 xi 是错的，那么它周围的点支持它的概率是多少。 我们用 fa 表示 A 这个圈中额外支持它的n个点中的一个点。然后去算这个概率，我们要给出一个事件和假设，如下图： 第一个事件表示：fa这个点匹配正确，它的概率为 t，这个概率跟这个算法有关，匹配的质量越高，那么这个概率当然要高 第二个事件表示：fa 这个点匹配错误，它的概率就是 1-t 第三个事件表示：fa 这个点 匹配到了 B 圈中的一个点（但不一定是正确的） 定义这三个事件后，我们给出一个假设：如果一个点它匹配错了，它的匹配还是从A到B的话，那么它的概率是多少 。我们知道如果是A中的一个点匹配错了，那有可能匹配到右边Image中的任何一个点，而它恰好匹配到B圈中的点，如果是随机分布的话，那么这个概率应该为 (m / M), m为B圈中的点的个数，M 为右边图中所有的点的个数。但是可能很多Image是这样的分布，但是有一些Image不是，我们为了弥补这个假设（随机分布），我们给它乘以一个 “贝塔”参数，当这个参数比较大的时候，这个假设就不那么成立了 。这个参数为1的时候，这个假设正好成立。 我们算一下这个概率，如下图： 因为m很小，所以 pf 是一个接近 0 的概率。而 pt 是一个接近 t 的数，因为 pf 是接近 0 的数 。所以这两个的差异很大，另外我们要怎么才能让这个差异变得更大？ 我们上面是在两张图中各画了一个小圈AB，这个小的区域中，他们的正确的点motion是连续的，通常一个Image中，不是只有这个一个小的区域中的motion是连续的，更大的区域应该也是连续的。 比如，之前那张狗的图片，我们只是画了狗的鼻子的一小块区域，但是其实鼻子旁边的区域也是连续的，当然我们不是画整张图片，只是比那个小圈更大一些，所以扩展到了 3*3的这样一个区域，相当于比之前的一个圈扩大了9倍，如下图： 我们之前只是画了a、b这两个圈，现在我们画了9个这样圈，并且统计这个 3 * 3 这样的区域中的 Si。这样便能增大这个distribution之间的差异，如下图： 因为是3*3，所以 K=9 ，这个Si的分布中 pt 和 pf 是跟之前的一样的，因为只有K变化了。所以计算一下均值和方差，如下图： 这个是后面要用到。 现在我们分析一下这个模型有什么用 Analysis Model Partionalbility 这个词是表示，对的点和错的点之间有多大的差距，看起来在这个模型中有多么不一样。P就是用来定义这两个分布（错的和正确的分布）的距离。P越大，表示这个错误的点和正确的点看起来越不一样，那么这个模型就越强。 Quantity-Quality equivalence 我们可以看到这个 P 是正比于这个 Kn 的，就是说你用越多的点在里面，那么这个模型就越强，错的点和对的点的区别就越大。 Relationship to Descriptors 看与这个descriptors的关系，这个descriptors就是 t ，比如你用sift特征点，假如这个sift特征特别强的话，那么这个P是趋近于无穷大的。这就能验证我们的算法是对的。，也比较合乎道理，你特征越强，你越好分割，所以 P 趋近于无穷大。 Experiments on real data该模型在Oxford Affine Dataset上进行评估。 在这里，我们运行SIFT匹配并根据基础事实将所有匹配标记为内点或外点。 我们计算每个匹配的一个小区域内的支持的个数。 纵轴表示了每个matching旁边画了两个小圈，然后数一数这个小圈中 正确的Inlier周围中到底有多少个点支持它，错的点到底有几个点支持它。 它有8的小的datasets，每个dataset里面有五对张照片，这五对照片匹配起来一对比一对难，就是越来越难，每个数据，是用8个datasets的数据做了平均得到的。 所以从上图可以看出：对于正确的点，就算是最难得时候，也有接近8个点支持它，而对于错误的点，始终没有超过1个点支持它。所以可以看出这个模型对于正确的点和错误的点的认识性还是很强的。 这个算法我们已经知道了，那么如何去加速实现它呢？ Grid Framework我们刚才是给每对匹配点画两个圈，一个点一个圈，这样的问题就是：你要想知道有多少个点这个圈内，那你必须要把所有的点过滤一遍。 所以现在我们的做法是不要给这个匹配点画圈，我们直接把image 打成网格，然后这个匹配点自然就会落在这个Image的网格中，那么它这个网格就代表他的这个小圈，就没有了两个小圈的匹配，而变成了两个网格的匹配，你只要数一下这个网格中有多少个点跟它一样就可以了。 只要你一开始把这些 Feature matching丢进这些网格中，你很容易数清楚。这样算法的时间复杂度就从O(n) -&gt; O(1). 所以会变得很快。 Motion Kernel因为我们之前已经知道用更多的region会产生更好的结果，因为我们进行统计的时候就变成了统计这九个小网格的正确点的数量就好了，就很容易能数清楚。 Empirical parameters（经验参数） 你用多少个网格？ 太细的话，统计不好 太粗的话，精度太低 经验上作者是说用 20 * 20 How to set the threshold？怎么设置阈值？就是认为计算出来的这个值（用 τ 表示）过了多少是对的，没过多少是错的。这个 α 参数一般我们设置为 0.6 。 Grid Motion Statistics Algorithm首先是给定这个 Correspondences（匹配点）、scale、rotation，然后产生这个 Kernel 和 Grid（20 * 20）。确定好了，去计算每一个点的统计值 Si ，然后去计算这个 τ，如果这个 Si &gt; τ，那么这个点就是对的。没过就是错的。 Full feature matching pipeline这是一个完整的流程，首先获取 feature 然后做 match，然后交给GMS，因为这个scale、rotation可能有多个值，你可以多试几遍，找到一个最好的值。 Run time这里是提取10000个点为例。 Evaluation 我们测试了4个dataset，第一个是TUM。做slam的可能知道，下面是6个视频，然后从中提取出很多帧做测试，所以这个数据集上有3000多个照片。 0-30是表示两张图片的角度，就是baseline。至于在Strecha和VGG上，Ratio算法表现并不差，是因为这两个数据集太水了，大家是用来发paper的。像TUM这样真正的应用数据上来看，一般的算法根本就不太行了，质量会很差。 X轴是时间，用的是ms表示，Y轴是performance，红色的是作者的算法表现。可以看出GMS实现了结果上差不多，但是时间上快很多倍的效果。 我们从上图可以看出，第一幅图，是在平面上，GMS和SIFT比来看，SIFT经过RANSAC后，结果还是勉强可以的。就是说在平面上，这个sift加上RANSAC结果还是可以的。但是在3D中，sift匹配的全都是错误的点，但是GMS依然是表现很好。说明我们这个算法对于wide-baseline问题是真的解决了，不像sift只有在实验中（那些dataset上）表现的还可以接受，但是在现实中的dataset就不行了。 再就是解决了重复结构的问题，如下图： 之前我们是假设物体是静止的，但是这些猫狗是会动的，动了之后，你拍的图片用sift去匹配的话，如果有的匹配错，并且没有那些RANSAC方法去帮它修正的，那么你匹配对的就是对的，错的就是错的，没有办法去修改。而作者的算法是可以匹配正确的，根本不需要去修正。]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>GMS</tag>
        <tag>CVPR 2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用快捷键教程]]></title>
    <url>%2F2018%2F05%2F08%2FMac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[用option快速输入一些特殊符号 option V： 输入 √ option /： 输入 ÷ option =： 输入 ≠ option &gt;： 输入 ≥ option &lt;： 输入 ≤ option K： 输入 ˚ option X： 输入 ≈ option =： 输入 ≠ option 2： 输入 ™ option R： 输入 ® option Y： 输入 ¥ option P： 输入 π option G： 输入 © option + shift + K：  通知中心开关 按住 option 点击桌面右上角通知中心，即可直接关闭或开启通知。不用在通知中心中打开了。 比如用 Mac 全屏看电影又不想被右上角的消息弹出打扰的话，暂时开启勿扰（关闭通知）就是了. WIFI状态按住 option 点击 Wi-Fi 图标即可查看 IP 地址、Wi-Fi 信号强度等等 Wi-Fi 的详细信息。 通用快捷键 command + M：最小化窗口 command + H：隐藏窗口 command + N：新建窗口 command + O：打开 command + Shift + S：另存为 command + P：打印 command + W：关闭 command + Q：退出 文件管理器 command + I：显示简介 command + F：搜索 command + delete：删除 command + Shift + delete：清空回收站 option + 方向键左：将光标移动到前一个单词 command + option + I：查看多个文件一共有多大 option + 方向键上：将光标移动到当前段落的开头 command + shift + 方向键左/右：可以选中一句话 command + 方向键左：将光标移动到句子的开头 command + 方向键上：将光标快速移动到整篇文本开头 浏览器 command + +\=：放大 command + --：缩小 command + T：新建一个选项卡 command + N：新建一个新窗口 command + R：刷新 command + F：搜索 command + W：关闭当前选项卡 command + D：将网页加入个人收藏 command + Z：恢复刚才关闭的网页 command + shift + B：显示或隐藏收藏栏 command + shift + N：打开一个全新的隐私浏览器窗口比较合适 space / space + shift：向下或向上滚动一整页 command + option + Q：退出 Safari，在下次打开的时候，会自动加载上次的所有窗口 option + 方向键上/方向键下：网页向上或向下滚动一整页 系统 command + option + esc：强制退出程序 command + shift + Y：生成便签 command + space：切换输入法 command：按住command即可用鼠标移动拖动顶部图标排列 control + command + space：快速调出emoji表情和各种特殊符号输入 shift + option + F1 / F2：可以以1/4格为单位对屏幕亮度调整，音量也是如此。 总结后续会继续补充。有什么遗漏的，可以留言。]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[吵架]]></title>
    <url>%2F2018%2F04%2F28%2F2018.4.27%2F</url>
    <content type="text"><![CDATA[今天是怎么了，或者说这几天是怎么了，天天惹你生气，心情很烦躁，我准备开始写日记，抒发一下自己的心情，要不我可能会被憋死的。 前序环顾四周和手机应用，竟然没有一个地方可以让我肆无忌惮的畅所欲言的发泄。在朋友圈、空间、微博你敢发吗，人长大了，总是要顾虑这顾虑那，我不想发在朋友圈后，让你再多想，我只是想找一个地方写写我的心情，要不我可能真的会被郁闷死的。 回忆中学初中时候，我个人的品性很差，现在想想那可能是最灰暗的三年了，没有知心朋友，脾气古怪，小心眼，自己一个人卑微的活着，也不知道打了多少架，现在想想，心中只是一阵痛。我只能说，有时候真的不是我的错，我还记得初中上学时，学校不让住校，我就只能在学校外跟同学合租房子，大约有5、6个人吧。其中有一个是邻班的班长，有天晚上，他就突然找我的茬。有人可能说，人家怎么会莫名其妙的找你的茬，但我可以摸着良心说，我真的没有做错什么。那天晚上，他跟我打了一架，我被揍了，哭着跑了出去，大晚上自己一个人走在马路上，一个人哭，最终我还是去给我妈妈打了个电话，最终的结果就是，我妈妈来了学校，他妈妈也来了学校，和解。后来我才知道，他为什么要跟我打架，因为他想让他一个好朋友住进来，把我踢出去，现在想起来我还是很痛恨他。 事情原委话扯远了，今天晚上也不知道为啥心情这么暴躁，刚开始和你打游戏时的心态可能就不对，最后因为我想用法师貂蝉，而队伍中已经有个法师，你就说别让我用法师，换个吧。我当时可能心情就很不爽了，因为之前打了几局都不好，然后就反驳，最后凶了你一句，然后我们就各删了游戏。呵呵，然后就在微信上聊了起来，你说你哭了，觉得自己很委屈，只不过是玩个游戏，我就凶你了，那以后生活的不得水深火热。我当时心中还很烦躁，我这个人要是心情烦躁起来，就不会讲理了。 聊着聊着，我就问了你一句：“现在后悔还来得及”，其实说完这句话，我很还忐忑，我心中在期待，你肯定的回答，但是没有。但也不意外，毕竟都在气头上，而且还是我的错。 我很害怕失去你，又不想表达出来，想听你心中最真实的想法，我自己心中的想法是“你要是想离开，我不会挽留”，因为你既然都想好了，我不想要个勉强的你。 自我反省话说回来，也该批评自己了，最近是很膨胀啊。毕竟这几年过得都顺风顺水，没什么大的坎坷，可能自己在心态上就有了变化，脾气也见长了，价值观也有了变化，喜欢购物，花钱，穿好看的。没有了高中那种一花钱就想到父母的辛苦。我觉得这样很不好，我要改变自己，虽然之前删游戏是一时之快，但是我想坚持下来，把更多的时间用在学习上。 改进之处 把更多的时间花在学习和陪你上 脾气暴躁需要改改，以后多读书，去图书馆借本自控力的书，每天阅读半个小时 爱说脏话，这个要改，但是没啥很好的方法，就平时多自己注意吧 总结自己写完这些字，心情果然好了点。继续加油，明天会是美好的一天！加油！]]></content>
      <categories>
        <category>心情笔记</category>
      </categories>
      <tags>
        <tag>丹岑</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[iTerm 2 实用快捷键]]></title>
    <url>%2F2017%2F11%2F02%2FiTerm%202%20%E5%AE%9E%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[⌘ + Click：可以打开文件，文件夹和链接 ⌘ + n：新建窗口 ⌘ + t：新建标签页 ⌘ + w：关闭当前页 ⌘ + 数字 &amp; ⌘ + 方向键：切换标签页 ⌥⌘ + 数字：切换窗口 ⌘ + enter：切换全屏 ⌘ + d：左右分屏ß ⇧⌘ + d：上下分屏 ⌘ + ;：自动补全历史记录 ⇧⌘ + h：自动补全剪贴板历史 ⌥⌘ + e：查找所有来定位某个标签页 ⌘ + r &amp; ⌃ + l：清屏 ⌘ + /：显示光标位置 ⌥⌘ + b：历史回放 ⌘ + f：查找，然后用 tab 和 ⇧ + tab 可以向右和向左补全，补全之后的内容会被自动复制， 还可以用 ⌥ + enter 将查找结果输入终端 选中即复制，鼠标中键粘贴 很多快捷键都是通用的，和 Emace 等都是一样的 ⌃ + u：清空当前行 ⌃ + a：移动到行首 ⌃ + e：移动到行尾 ⌃ + f：向前移动 ⌃ + b：向后移动 ⌃ + p：上一条命令 ⌃ + n：下一条命令 ⌃ + r：搜索历史命令 ⌃ + y：召回最近用命令删除的文字 ⌃ + h：删除光标之前的字符 ⌃ + d：删除光标所指的字符 ⌃ + w：删除光标之前的单词 ⌃ + k：删除从光标到行尾的内容 ⌃ + t：交换光标和之前的字符]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>iTem2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[密钥分发中心（KDC）]]></title>
    <url>%2F2017%2F11%2F02%2F%E5%AF%86%E9%92%A5%E5%88%86%E5%8F%91%E4%B8%AD%E5%BF%83%EF%BC%88KDC%EF%BC%89%2F</url>
    <content type="text"><![CDATA[简言 密钥分发中心是一种运行在物理安全服务器上的服务，KDC维护着领域中所有安全主体账户信息数据库。 与每一个安全主体的其他信息一起，KDC存储了仅安全主体和KDC知道的加密密钥，这个密钥也称长效密钥（主密钥），用于在安全主体和KDC之间进行交换。 KDC是作为发起方和接收方共同信任的第三方，因为他维护者一个存储着该域中所有账户的账户数据库，也就是说，他知道属于每个账户的名称和派生于该账户密码的Master Key（主密钥）。而用于Alice和Bob相互认证的会话密钥就是由KDC分发的，下面详细讲解KDC分发会话密钥的过程。 分发会话密钥过程1、首先客户端向KDC发送一个会话密钥申请。这个申请的内容可以简单概括为”我是某客户端，我需要个Session Key用于与某服务器通话“。 2、KDC在接收到这个请求的时候，生成一个会话密钥。为了保证这个会话密钥仅仅限于发送请求的客户端和它希望访问的服务器知道，KDC会为这个会话密钥生成两个副本，分别被客户端和服务器使用。然后从账户数据库中提取客户端和服务器的主密钥分别对这两个副本进行对称加密。对于服务器，与会话密钥一起被加密的还包含关于客户端的一些信息，以便对发起连接请求的客户端进行身份认证。 注意：KDC不是直接把这两个会话密钥副本分发客户端和服务器的，因为如果这样做，对于服务器来说会 出现下面两个问题。由于一个服务器会面对若干不同的客户端，而每个客户端都具有一个不同的Session Key。那么服务器就会为所有的客户端维护这样一个会话密钥的列表，这样对服务器来说工作量就非常 大了。由于网络传输的不确定性，可能会出现这样一种情况：客户端很快获得会话密钥用于副本，并将 这个会话密钥作为凭据随同访问请求发送到服务器，但是用于服务器的会话密钥却还没有收到，并且很 有可能这个会话密钥永远也到不了服务器端，这样客户端将永远得不到认证。为了解决这个问题， Kerberos将这两个被加密的副本一同发送给客户端，属于服务器的那份由客户端发送给服务器。因为 这两个会话密钥副本分别是由客户端和服务器端的主密钥加密的，所以不用担心安全问题。 3、通过上面的过程，客户端实际上获得了两组信息：一个是通过自己主密钥加密的会话密钥；另一个是被Server的主密钥加密的数据包，包含会话密钥和关于自己的一些确认信息。在这个基础上，我们再来看看服务器是如何对客户端进行认证的。 4、客户端通过用自己的主密钥对KDC加密的会话密钥进行解密从而获得会话密钥，随后创建认证符（Authenticator，包括客户端信息和时间戳（Timestamp）），并用会话密钥对其加密。最后连同从KDC获得的、被服务器的主密钥加密过的数据包（客户端信息和会话密钥）一并发送到服务器端。我们把通过服务器的主密钥加密过的数据包称为服务票证（Session Ticket）。 5、当服务器接收到这两组数据后，先使用它自己的主密钥对服务票证进行解密，从而获得会话密钥。随后使用该会话密钥解密认证符，通过比较由客户端发送来的认证符中的客户端信息（Client Info）和服务票证中的客户端信息实现对客户端身份的验证。 双方进行了身份认证的同时也获得了会话密钥，那么双方可以进行会话了。 流程图如下： 客户端简称为Alice，服务端简称为Bob 总结参考文章]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>KDC</tag>
        <tag>密钥</tag>
      </tags>
  </entry>
</search>
